name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'beta-*'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out code from repo
      uses: actions/checkout@v4
    - name: Get release version for filenames
      id: release_tag
      env:
        GITHUB_REF: ${{ github.ref }}
      run: |
        tag="${GITHUB_REF#refs/tags/}"
        echo "tag=${tag}" >> "$GITHUB_OUTPUT"
    - name: Get release version for code
      env:
        GITHUB_REF: ${{ github.ref }}
      run: echo "GITHUB_TAG=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

    - name: Inject secrets into ini file
      run: |
        sed -i 's/NO_AMS2MQTT_PRICE_KEY/AMS2MQTT_PRICE_KEY="${{secrets.AMS2MQTT_PRICE_KEY}}"/g' platformio.ini
        sed -i 's/NO_AMS2MQTT_PRICE_AUTHENTICATION/AMS2MQTT_PRICE_AUTHENTICATION="${{secrets.AMS2MQTT_PRICE_AUTHENTICATION}}"/g' platformio.ini
        sed -i 's/NO_AMS2MQTT_SC_KEY/AMS2MQTT_SC_KEY=\\"${{secrets.AMS2MQTT_SC_KEY}}\\"/g' platformio.ini
        sed -i 's/NO_ENERGY_SPEEDOMETER_USER/ENERGY_SPEEDOMETER_USER=\\"${{secrets.ENERGY_SPEEDOMETER_USER}}\\"/g' platformio.ini
        sed -i 's/NO_ENERGY_SPEEDOMETER_PASS/ENERGY_SPEEDOMETER_PASS=\\"${{secrets.ENERGY_SPEEDOMETER_PASS}}\\"/g' platformio.ini

    - name: Write MQTT defaults
      env:
        MQTT_DEFAULT_HOST: ${{ secrets.MQTT_DEFAULT_HOST }}
        MQTT_DEFAULT_PORT: ${{ secrets.MQTT_DEFAULT_PORT }}
        MQTT_DEFAULT_USERNAME: ${{ secrets.MQTT_DEFAULT_USERNAME }}
        MQTT_DEFAULT_PASSWORD: ${{ secrets.MQTT_DEFAULT_PASSWORD }}
        MQTT_DEFAULT_CLIENT_ID: ${{ secrets.MQTT_DEFAULT_CLIENT_ID }}
        MQTT_DEFAULT_PUBLISH_TOPIC: ${{ secrets.MQTT_DEFAULT_PUBLISH_TOPIC }}
        MQTT_DEFAULT_SUBSCRIBE_TOPIC: ${{ secrets.MQTT_DEFAULT_SUBSCRIBE_TOPIC }}
        MQTT_DEFAULT_PAYLOAD_FORMAT: ${{ secrets.MQTT_DEFAULT_PAYLOAD_FORMAT }}
        MQTT_DEFAULT_SSL: ${{ secrets.MQTT_DEFAULT_SSL }}
        MQTT_DEFAULT_STATE_UPDATE: ${{ secrets.MQTT_DEFAULT_STATE_UPDATE }}
        MQTT_DEFAULT_STATE_UPDATE_INTERVAL: ${{ secrets.MQTT_DEFAULT_STATE_UPDATE_INTERVAL }}
        MQTT_DEFAULT_TIMEOUT: ${{ secrets.MQTT_DEFAULT_TIMEOUT }}
        MQTT_DEFAULT_KEEPALIVE: ${{ secrets.MQTT_DEFAULT_KEEPALIVE }}
      run: |
        {
          printf 'MQTT_DEFAULT_HOST="%s"\n' "${MQTT_DEFAULT_HOST}"
          printf 'MQTT_DEFAULT_PORT="%s"\n' "${MQTT_DEFAULT_PORT}"
          printf 'MQTT_DEFAULT_USERNAME="%s"\n' "${MQTT_DEFAULT_USERNAME}"
          printf 'MQTT_DEFAULT_PASSWORD="%s"\n' "${MQTT_DEFAULT_PASSWORD}"
          printf 'MQTT_DEFAULT_CLIENT_ID="%s"\n' "${MQTT_DEFAULT_CLIENT_ID}"
          printf 'MQTT_DEFAULT_PUBLISH_TOPIC="%s"\n' "${MQTT_DEFAULT_PUBLISH_TOPIC}"
          printf 'MQTT_DEFAULT_SUBSCRIBE_TOPIC="%s"\n' "${MQTT_DEFAULT_SUBSCRIBE_TOPIC}"
          printf 'MQTT_DEFAULT_PAYLOAD_FORMAT="%s"\n' "${MQTT_DEFAULT_PAYLOAD_FORMAT}"
          printf 'MQTT_DEFAULT_SSL="%s"\n' "${MQTT_DEFAULT_SSL}"
          printf 'MQTT_DEFAULT_STATE_UPDATE="%s"\n' "${MQTT_DEFAULT_STATE_UPDATE}"
          printf 'MQTT_DEFAULT_STATE_UPDATE_INTERVAL="%s"\n' "${MQTT_DEFAULT_STATE_UPDATE_INTERVAL}"
          printf 'MQTT_DEFAULT_TIMEOUT="%s"\n' "${MQTT_DEFAULT_TIMEOUT}"
          printf 'MQTT_DEFAULT_KEEPALIVE="%s"\n' "${MQTT_DEFAULT_KEEPALIVE}"
        } > .env

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('platformio.ini') }}
    - name: Cache PlatformIO dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pio/libdeps
        key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U platformio css_html_js_minify

    - name: Set up node
      uses: actions/setup-node@v4
      with:
        node-version: '19.x'
    - name: Build with node
      run: |
        cd lib/SvelteUi/app
        npm ci
        npm run build
        cd -
      env:
        CI: false

    - name: PlatformIO lib install
      run: ./scripts/pio-run.sh lib install

    - name: Create release with release notes
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        name: Release v${{ steps.release_tag.outputs.tag }}
        generateReleaseNotes: true
        allowUpdates: true

    - name: Build esp8266 firmware
      run: ./scripts/pio-run.sh run -e esp8266
    - name: Create esp8266 zip file
      run: /bin/sh scripts/esp8266/mkzip.sh
    - name: Upload esp8266 binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp8266/firmware.bin
        asset_name: ams2mqtt-esp8266-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp8266 zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp8266.zip
        asset_name: ams2mqtt-esp8266-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Build esp32 firmware
      run: ./scripts/pio-run.sh run -e esp32
    - name: Create esp32 zip file
      run: /bin/sh scripts/esp32/mkzip.sh
    - name: Upload esp32 binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32/firmware.bin
        asset_name: ams2mqtt-esp32-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp32 zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp32.zip
        asset_name: ams2mqtt-esp32-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Build esp32s2 firmware
      run: ./scripts/pio-run.sh run -e esp32s2
    - name: Create esp32s2 zip file
      run: /bin/sh scripts/esp32s2/mkzip.sh
    - name: Upload esp32s2 binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32s2/firmware.bin
        asset_name: ams2mqtt-esp32s2-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp32s2 zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp32s2.zip
        asset_name: ams2mqtt-esp32s2-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Build esp32s3 firmware
      run: ./scripts/pio-run.sh run -e esp32s3
    - name: Create esp32s3 zip file
      run: /bin/sh scripts/esp32s3/mkzip.sh
    - name: Upload esp32s3 binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32s3/firmware.bin
        asset_name: ams2mqtt-esp32s3-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp32s3 zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp32s3.zip
        asset_name: ams2mqtt-esp32s3-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Build esp32solo firmware
      run: ./scripts/pio-run.sh run -e esp32solo
    - name: Create esp32solo zip file
      run: /bin/sh scripts/esp32solo/mkzip.sh
    - name: Upload esp32solo binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32solo/firmware.bin
        asset_name: ams2mqtt-esp32solo-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp32solo zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp32solo.zip
        asset_name: ams2mqtt-esp32solo-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Build esp32c3 firmware
      run: ./scripts/pio-run.sh run -e esp32c3
    - name: Create esp32c3 zip file
      run: /bin/sh scripts/esp32c3/mkzip.sh
    - name: Upload esp32c3 binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32c3/firmware.bin
        asset_name: ams2mqtt-esp32c3-${{ steps.release_tag.outputs.tag }}.bin
        asset_content_type: application/octet-stream
    - name: Upload esp32c3 zip to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: esp32c3.zip
        asset_name: ams2mqtt-esp32c3-${{ steps.release_tag.outputs.tag }}.zip
        asset_content_type: application/zip

    - name: Package firmware manifests
      run: |
        python scripts/package_firmware.py --output dist --channel stable --version ${{ steps.release_tag.outputs.tag }}
        ls -R dist

    - name: Configure GitHub Pages
      uses: actions/configure-pages@v4

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
